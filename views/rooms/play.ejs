<h1>Game Room</h1>

<div id='announcements'>Waiting on other player to join</div>

<table>
    <tr id="board_row">
        <td><div id="board"></div></td>
        <td><div id="opp_board"></div></td>
    </tr>
    <tr id="info_row">
        <td><textarea id="chat" style="resize:none" cols="40" rows="5" readonly></textarea></td>
        <td><textarea id="log" style="resize:none" data-role="none" cols="40" rows="5" readonly></textarea></td>
    </tr>
</table>

<button id="ready_btn">I'm Ready!</button>



<script type="text/javascript">
    function toggle_ready_button(state) {
        if(state) {
            $('#ready_btn').removeAttr('disabled');
        } else {
            $('#ready_btn').attr('disabled', 'disabled');
        }
    }

</script>
<script src='/javascripts/maze.js'></script>
<script src="/socket.io/socket.io.js"></script>
<script type="text/javascript">
    var dim, start;
    var socket = io.connect("");
    socket.emit('join_room', {room: '<%= room %>'});

    socket.on('disconnect', go_home);
    socket.on('start_create_maze_phase', function(data) {

        // assigning this variable to access later when we create the new board element
        // this may not be needed
        dim = data['maze_dim'];

        generate_board(data['maze_dim']);
        $('#announcements').html("Build your maze, and click 'I'm ready', when you're done!");
    });

    $('#ready_btn').on('click', function() {
        // validate maze on server side
        // if it has been validated, we can emit 'player_ready'
        socket.emit('player_ready', 
            {   name: "<%= name %>", 
                room: "<%= room %>", 
                edge_map: edge_map, 
                true_connections: connections,
                start: maze.getStartId(),
                end: maze.getEndId()  
            }
        );
    });

    socket.on('waiting_on_other_player', function() {
        $('#ready_btn').html('waiting on the other player!');
        $('#ready_btn').attr('disabled', 'disabled');
        $('#announcements').html('waiting on the other player...');
    });

    socket.on('start_play_phase', function(data) {
        $('#announcements').html("Play phase started!");

        disable_board_modify = true;

        //
        // ***FIX ME***
        // 
        from_square = 0;
        start = 0;
        $("#o"+from_square).removeClass("start").addClass("current");

        // Creates a new board element, this will be what the user uses 
        // to see their progress and make their next move
        create_board_html("#opp_board", dim, true);

        $('#ready_btn').remove();
        $('#board_row').append($("<button>", {id: "submit", text:"Submit"}).wrap("<td></td>").click(function() {
            // check if it could be a valid move. This does not check if the player has already
            // found a wall here.
            if (valid_move(from_square, to_square, dim)) {
                // if valid, submit
                socket.emit('move_submit', {room: "<%= room %>", from: from_square, to: to_square});
                console.log("Move submitted");
            } else {
                console.log("Not a valid move");
            }
        }));
    });


    /* START: new functions for turn-by-turn gameplay */
    // to submit a move to the server:
    

    // this comes back after a move was submitted:
    socket.on('move_response', function(data) {
        if (data['move']) {
            // if the move was validated by the server
            log_turn(to_square, from_square, "You", true, false);
            // Update the html
            $("#o"+from_square).removeClass("current");
            $("#o"+to_square).removeClass("selected");
            $("#o"+to_square).addClass("current");

            // if from_square was the start square
            if (from_square === start) {
                $("#o"+from_square).addClass("start");
            }

            // from because the old to, the new to_square doesn't exist yet
            from_square = to_square;
            to_square = null;
        } else {
            // Move blocked by wall

            log_turn(to_square, from_square, "You", false, false);

            // get the id of the blocking wall and show a wall there
            var id = get_wall_id(from_square, to_square, dim);
            // console.log("wall id:"+id);
            $("#w"+id).addClass("red");

            // reset selected square;
            $("#o"+to_square).removeClass("selected");
            to_square = null;
        }

        // console.log(data); 
    });

    // this comes back when it's the other player's turn
    socket.on('other_players_turn', function(data) {
        // console.log("it's the other player's turn");
        $("#log").append("It's the other player's turn.\n");
        $('#log').scrollTop($('#log')[0].scrollHeight);

        $('#submit').attr('disabled', 'disabled');
        current_turn = false;

        // initialize the other player's position if it's the first round
        if (other_current === null) {
            other_current = maze.getStartId();
            $('#s'+other_current).addClass('current');
        }
    });

    // this comes back when it's your turn
    socket.on('your_turn', function(data) {

        if (other_current !== null) {
            // if it's not the first round

            // log the other players turn
            log_turn(data['to'], data['from'], "The other guy", data['move'], false);
            if (data['move']) {
                other_current = data['to'];

                // update the html
                $('#s'+data['from']).removeClass('current');
                $('#s'+data['to']).addClass('current');
            }

        } else {
            // if it's the first round
            other_current = maze.getStartId();
            $('#s'+other_current).addClass('current');
        }

        // log
        $("#log").append("It's your turn!\n");
        $('#log').scrollTop($('#log')[0].scrollHeight);

        $('#submit').removeAttr('disabled');
        current_turn = true;
    });    

    // comes back when a player wins, get's checked after every move
    socket.on('game_over', function(data) { console.log(data); });

    // server side maze-validation response
    socket.on('maze_validation', function(data) { console.log(data); });
    /* END: new functions for turn-by-turn gameplay */

    function go_home(data) {
        window.location.replace("/");
    }

    function log_turn(to, from, player, valid, won) {
        if (won) {
            $("#log").appened(player+" WINS!\n");
            return;
        }
        if (valid) {
            $("#log").append(player+" moved from: "+from+" to: "+to+"\n");
        } else {
            $("#log").append(player+" tried to move from: "+from+" to: "+to+", but FAILED HORRIBLY.\n");
        }
        
        $('#log').scrollTop($('#log')[0].scrollHeight);
    }

</script>